// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Batch {
  id             String          @id @default(uuid())
  name           String
  description    String?
  userId         String          // User identifier
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  status         BatchStatus     @default(PROCESSING)
  completedAt    DateTime?
  totalImages    Int             @default(0)
  processedImages Int            @default(0)
  validImages    Int             @default(0)
  rejectedImages Int             @default(0)
  errorImages    Int             @default(0)
  images         Image[]
  
  @@index([userId])
  @@index([status])
}

model Image {
  id             String          @id @default(uuid())
  originalName   String
  s3Key          String          @unique
  s3Url          String
  mimeType       String
  size           Int             // Size in bytes
  width          Int
  height         Int
  uploadedAt     DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  status         ImageStatus     @default(PROCESSING)
  processingInfo ProcessingInfo?
  userId         String          // User identifier
  hash           String?         // Image hash for similarity detection
  blurScore      Float?          // Score determining image blurriness (lower is more blurry)
  faceInfo       FaceInfo?
  isDeleted      Boolean         @default(false)
  rejectionReason String?        // Reason for rejection if status is REJECTED
  
  // Batch relationship
  batchId        String
  batch          Batch           @relation(fields: [batchId], references: [id])
  
  // Optional fields for additional metadata
  description    String?
  tags           String[]
  
  // Validation results
  validationResults ValidationResult[]
  
  @@index([status])
  @@index([hash])
  @@index([userId])
  @@index([batchId])
  @@index([isDeleted])
}

model ProcessingInfo {
  id                String   @id @default(uuid())
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  processingTimeMs  Int?
  convertedFromHeic Boolean  @default(false)
  error             String?
  imageId           String   @unique
  image             Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
}

model FaceInfo {
  id             String    @id @default(uuid())
  faceCount      Int       @default(0)
  primaryFaceArea Float?    // Percentage of image taken by primary face
  confidence     Float?    // Confidence score of face detection
  boundingBox    Json?     // Bounding box coordinates
  landmarks      Json?     // Face landmarks if detected
  imageId        String    @unique
  image          Image     @relation(fields: [imageId], references: [id], onDelete: Cascade)
}

enum ImageStatus {
  PROCESSING
  VALIDATED
  REJECTED
  ERROR
}

enum BatchStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum ValidationType {
  SIZE_VALIDATION
  FORMAT_VALIDATION
  DUPLICATE_DETECTION
  BLUR_DETECTION
  FACE_SIZE_VALIDATION
  MULTIPLE_FACES_VALIDATION
}

model ValidationResult {
  id             String         @id @default(uuid())
  type           ValidationType
  passed         Boolean
  details        Json?
  createdAt      DateTime       @default(now())
  value          Float?         // Stores numeric results like blur score, face size percentage, etc.
  
  // Image relationship
  imageId        String
  image          Image          @relation(fields: [imageId], references: [id], onDelete: Cascade)
  
  @@index([imageId])
  @@index([type])
  @@index([passed])
}